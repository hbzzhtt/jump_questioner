{"persistifyArgs":{"cache":{"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\9e\\9eac9b9e-c973-4410-8883-5a5e63a600bf.js":{"source":"\"use strict\";\ncc._RF.push(module, '9eac9ueyXNEEIiDWl5jpgC/', 'star');\n// script/star.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        // 星星和主角之间的距离小于这个数值时，就会完成收集\n        pickRadius: 0\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {},\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        if (this.getPlayerDistance() < this.pickRadius) this.onPicked();\n        // ...\n        // 根据 Game 脚本中的计时器更新星星的透明度\n        var opacityRatio = 1 - this.game.timer / this.game.starDuration;\n        var minOpacity = 50;\n        this.node.opacity = minOpacity + Math.floor(opacityRatio * (255 - minOpacity));\n    },\n\n    getPlayerDistance: function getPlayerDistance() {\n        // 根据 player 节点位置判断距离        \n        var playerPos = this.game.player.getPosition();\n        // 根据两点位置计算两点之间距离\n        var dist = this.node.position.sub(playerPos).mag();\n        return dist;\n    },\n\n    onPicked: function onPicked() {\n        // 当星星被收集时，调用 Game 脚本中的接口，生成一个新的星星\n        this.game.spawnNewStar();\n        // 玩家得分\n        this.game.gainScore();\n        // 然后销毁当前星星节点\n        this.node.destroy();\n    }\n});\n\ncc._RF.pop();","deps":{}},"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\ff\\ff3d756e-7c4f-4327-9d2f-33f0d0e695be.js":{"source":"\"use strict\";\ncc._RF.push(module, 'ff3d7VufE9DJ50vM/DQ5pW+', 'player');\n// script/player.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // foo: {\n        //    default: null,      // The default value will be used only when the component attaching\n        //                           to a node for the first time\n        //    url: cc.Texture2D,  // optional, default is typeof default\n        //    serializable: true, // optional, default is true\n        //    visible: true,      // optional, default is true\n        //    displayName: 'Foo', // optional\n        //    readonly: false,    // optional, default is false\n        // },\n        // ...\n        // 主角跳跃高度\n        jumpHeight: 0,\n        // 主角跳跃持续时间\n        jumpDuration: 0,\n        // 最大移动速度\n        maxMoveSpeed: 0,\n        // 加速度\n        accel: 0,\n        // 摩擦力 \n        disaccel: 0,\n        // 跳跃音效资源\n        jumpAudio: {\n            default: null,\n            url: cc.AudioClip\n        }\n    },\n\n    // use this for initialization\n    onLoad: function onLoad() {\n        this.node.runAction(this.setJumpAction());\n        // 加速度方向开关\n        this.accLeft = false;\n        this.accRight = false;\n        this.firstJump = false;\n        this.secondJump = false;\n        this.firstJumpFinish = false;\n        this.secondJumpFinish = false;\n        // 主角当前水平方向速度\n        this.xSpeed = 0;\n\n        // 初始化键盘输入监听\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n    onDestroy: function onDestroy() {\n        // 取消键盘输入监听\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.onKeyDown, this);\n        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_UP, this.onKeyUp, this);\n    },\n\n\n    setJumpAction: function setJumpAction() {\n        //cc.log('jump to'+this.jumpHeight);\n        //cc.log('player y is'+this.node.y);\n\n        // 跳跃上升\n        var jumpUp = cc.moveBy(this.jumpDuration, cc.v2(0, this.jumpHeight)).easing(cc.easeCubicActionOut());\n        // 下落\n        var jumpDown = cc.moveBy(this.jumpDuration, cc.v2(0, -this.jumpHeight)).easing(cc.easeCubicActionIn());\n        // 落下来之后播放落地的声音，然后取消二段跳的状态\n        var callback = cc.callFunc(this.playJumpDownCallback, this);\n        // 不断重复\n        return cc.repeatForever(cc.sequence(jumpUp, jumpDown, callback));\n    },\n\n    playJumpDownCallback: function playJumpDownCallback() {\n        // 调用声音引擎播放声音\n        cc.audioEngine.playEffect(this.jumpAudio, false);\n        // 取消二段跳  \n        //this.firstJump = false;\n        //this.secondJump = false;\n    },\n\n    onKeyin: function onKeyin(keyCode) {\n        switch (keyCode) {\n            case cc.KEY.left:\n                this.accLeft = true;\n                break;\n            case cc.KEY.right:\n                this.accRight = true;\n                break;\n        }\n    },\n    onKeyout: function onKeyout(keyCode) {\n        switch (keyCode) {\n            case cc.KEY.left:\n                this.accLeft = false;\n                break;\n            case cc.KEY.right:\n                this.accRight = false;\n                break;\n        }\n    },\n    onKeyDown: function onKeyDown(event) {\n        // set a flag when key pressed\n        switch (event.keyCode) {\n            case cc.KEY.left:\n                this.accLeft = true;\n                break;\n            case cc.KEY.right:\n                this.accRight = true;\n                break;\n            //case cc.KEY.space:\n            ////一段跳和二段跳的起手应该在按键时候触发，结束则应该是落下地面时候结束\n            //    if(this.firstJump && this.secondJump)\n            //        ;\n            //    else if(this.firstJump)\n            //\t{\n            //        this.secondJump = true;\n            //\t\tthis.secondJumpFinish = false;\n            //\t}\n            //    else\n            //\t{\n            //        this.firstJump = true;\n            //\t\tthis.firstJumpFinish = false;\n            //\t}\n            //    break;\n\n\n        }\n    },\n    onKeyUp: function onKeyUp(event) {\n        // set a flag when key pressed\n        switch (event.keyCode) {\n            case cc.KEY.left:\n                this.accLeft = false;\n                break;\n            case cc.KEY.right:\n                this.accRight = false;\n                break;\n        }\n    },\n\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 根据当前加速度方向每帧更新速度\n        if (this.accLeft) {\n            this.xSpeed -= this.accel * dt;\n        } else if (this.accRight) {\n            this.xSpeed += this.accel * dt;\n        } else {\n            //不操作应该逐渐减速\n            if (this.xSpeed > 0 && this.xSpeed - this.disaccel > 0) this.xSpeed -= this.disaccel;else if (this.xSpeed < 0 && this.xSpeed + this.disaccel < 0) this.xSpeed += this.disaccel;else this.xSpeed = 0;\n        }\n        //if(this.secondJump)\n        //{\n        //\tif(this.secondJumpFinish==false)\n        //\t{\n        //\t\tthis.y += this.jumpHeight/4;//fixme\n        //\t\tthis.game.gainScore();//fixme\n        //\t\tthis.secondJumpFinish=true;\n        //\t} \n        //}\n        //else if(this.firstJump)\n        //{\n        //\tif(this.firstJumpFinish==false)\n        //\t{\n        //\t\tthis.y += this.jumpHeight/2;//fixme\n        //\t\tthis.game.gainScore();//fixme\n        //\t\tthis.firstJumpFinish=true;\n        //\t} \n        //}\n        // 限制主角的速度不能超过最大值\n        if (Math.abs(this.xSpeed) > this.maxMoveSpeed) {\n            // if speed reach limit, use max speed with current direction\n            this.xSpeed = this.maxMoveSpeed * this.xSpeed / Math.abs(this.xSpeed);\n        }\n\n        // 根据当前速度更新主角的位置\n        this.node.x += this.xSpeed * dt;\n    }\n\n});\n\ncc._RF.pop();","deps":{}},"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\99\\991ec87c-4e6c-4b26-a5c3-12b222469351.js":{"source":"\"use strict\";\ncc._RF.push(module, '991ech8TmxLJqXDErIiRpNR', 'game');\n// script/game.js\n\n\"use strict\";\n\ncc.Class({\n    extends: cc.Component,\n\n    properties: {\n        // 这个属性引用了星星预制资源\n        starPrefab: {\n            default: null,\n            type: cc.Prefab\n        },\n        // 星星产生后消失时间的随机范围\n        maxStarDuration: 0,\n        minStarDuration: 0,\n        // 地面节点，用于确定星星生成的高度\n        ground: {\n            default: null,\n            type: cc.Node\n        },\n        // player 节点，用于获取主角弹跳的高度，和控制主角行动开关\n        player: {\n            default: null,\n            type: cc.Node\n        },\n        //游戏的得分\n        score: {\n            default: 0,\n            displayName: \"Score (player)\",\n            tooltip: \"The score of player\"\n        },\n        //游戏得分的显示\n        scoreDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 得分音效资源\n        scoreAudio: {\n            default: null,\n            url: cc.AudioClip\n        },\n        // 剩余时间显示\n        timeDisplay: {\n            default: null,\n            type: cc.Label\n        },\n        // 给左右按钮传递玩家的引用\n        leftButton: {\n            default: null,\n            type: cc.Node\n        },\n        rightButton: {\n            default: null,\n            type: cc.Node\n        }\n\n    },\n    // use this for initialization\n    onLoad: function onLoad() {\n        // 获取地平面的 y 轴坐标\n        this.groundY = this.ground.y + this.ground.height / 2;\n        // 生成一个新的星星\n        this.spawnNewStar();\n        // 生成一个新的星星\n        this.spawnNewStar();\n        // 用于二段跳的测试\n        // this.player.getComponent('player').game=this;\n        // 用于左右触控按钮传递信息给player \n        this.leftButton.on(cc.Node.EventType.TOUCH_START, this.onleftTouchStart, this);\n        this.leftButton.on(cc.Node.EventType.TOUCH_END, this.onleftTouchEnd, this);\n        this.rightButton.on(cc.Node.EventType.TOUCH_START, this.onrightTouchStart, this);\n        this.rightButton.on(cc.Node.EventType.TOUCH_END, this.onrightTouchEnd, this);\n\n        // 初始化星星消失时间的计时器\n        this.timer = 0;\n    },\n\n    onleftTouchEnd: function onleftTouchEnd() {\n        this.player.getComponent('player').onKeyout(cc.KEY.left);\n    },\n\n    onleftTouchStart: function onleftTouchStart() {\n        this.player.getComponent('player').onKeyin(cc.KEY.left);\n    },\n\n    onrightTouchEnd: function onrightTouchEnd() {\n        this.player.getComponent('player').onKeyout(cc.KEY.right);\n    },\n\n    onrightTouchStart: function onrightTouchStart() {\n        this.player.getComponent('player').onKeyin(cc.KEY.right);\n    },\n\n    gainScore: function gainScore() {\n        this.score += 1;\n        this.scoreDisplay.string = 'Score:' + this.score;\n        cc.audioEngine.playEffect(this.scoreAudio, false);\n    },\n\n    spawnNewStar: function spawnNewStar() {\n        // 使用给定的模板在场景中生成一个新节点\n        var newStar = cc.instantiate(this.starPrefab);\n        // 为星星设置一个随机位置\n        newStar.setPosition(this.getNewStarPosition());\n        // 将新增的节点添加到 Canvas 节点下面\n        this.node.addChild(newStar);\n        // 给星星提供game场景的引用，使得星星可以获取玩家的位置，判断自己是否被捕捉到了\n        newStar.getComponent('star').game = this;\n        // 重置星星消失的计时器，根据消失时间范围随机取一个值\n        this.starDuration = this.minStarDuration + Math.random() * (this.maxStarDuration - this.minStarDuration);\n        this.timer = 0;\n    },\n\n    getNewStarPosition: function getNewStarPosition() {\n        var randX = 0;\n        // 根据地平面位置和主角跳跃高度，随机得到一个星星的 y 坐标 \n        var randY = this.groundY + Math.random() * this.player.getComponent('player').jumpHeight;\n\n        // 根据屏幕宽度，随机得到一个星星 x 坐标\n        var maxX = this.node.width / 2;\n        randX = (Math.random() - 0.5) * 2 * maxX;\n        cc.log('randY is' + randY);\n        cc.log('this.groundY is ' + this.groundY);\n        // 返回星星坐标\n        return cc.v2(randX, randY);\n    },\n\n    // called every frame, uncomment this function to activate update callback\n    update: function update(dt) {\n        // 如果主角的位置到了屏幕边界，就从屏幕另一边出来\n        var maxX = this.node.width / 2;\n        var minX = 0 - maxX;\n        if (this.player.getComponent('player').node.x > maxX) this.player.getComponent('player').node.x = minX;else if (this.player.getComponent('player').node.x < minX) this.player.getComponent('player').node.x = maxX;\n\n        // 如果主角一定时间没有捉到星星，游戏结束了\n        if (this.timer > this.starDuration) {\n            this.gameOver();\n            return;\n        }\n        this.timer += dt;\n        this.timeDisplay.string = 'TimeLeft:' + parseInt(this.starDuration - this.timer);\n    },\n\n    gameOver: function gameOver() {\n        this.player.stopAllActions(); //停止 player 节点的跳跃动作\n\n        cc.director.loadScene('game'); //管理游戏逻辑流程的单例对象，这里是游戏重新开始\n    }\n});\n\ncc._RF.pop();","deps":{}}},"packageCache":{"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\assets\\script\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\assets\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\package.json":false,"C:\\Users\\Administrator\\Desktop\\package.json":false,"C:\\Users\\Administrator\\package.json":false,"C:\\Users\\package.json":false,"C:\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\assets\\script\\NewScript.js":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\ff\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\ff\\ff3d756e-7c4f-4327-9d2f-33f0d0e695be.js":{"__dirname":"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\ff"},"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\assets\\script\\player.js":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\9e\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\9e\\9eac9b9e-c973-4410-8883-5a5e63a600bf.js":{"__dirname":"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\9e"},"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\assets\\script\\star.js":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\99\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\99\\991ec87c-4e6c-4b26-a5c3-12b222469351.js":{"__dirname":"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\99"},"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\assets\\script\\game.js":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\81\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\81\\8106b2db-a6ed-4a47-983f-aad058c21620.js":{"__dirname":"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\81"},"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\assets\\script\\leftButton.js":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\ee\\package.json":false,"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\ee\\ee9c86ee-ce48-4787-93dd-ff27a1c0cc80.js":{"__dirname":"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\library\\imports\\ee"},"C:\\Users\\Administrator\\Desktop\\start_project\\start_project\\assets\\script\\rightButton.js":false}}}